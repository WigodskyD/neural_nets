# -*- coding: utf-8 -*-
"""
Created on Wed Aug 26 11:45:28 2020

This classifier determines from an image, whether an SUV or a sedan is in the image. 
@author: dawig
"""

import tensorflow as tf
from tensorflow.keras import layers
from tensorflow.keras import Model
import matplotlib.pyplot as plt
import sys
sys.path.insert(1, 'C:/Users/dawig/Desktop')
from MyFavoritesClass import SoundRotator


#-----------------------------------
#Parameters:
data_pathway = "D:/Tensorflow_practice_data/sedan_or_SUV_classifier"
batch_size = 30
img_height = 300
img_width = 300
epochs_to_train = 100


#_________________________________________________________________

#________
# Import data with ImageDataGenerator
#________
tf.keras.backend.clear_session()
train_datagen = tf.keras.preprocessing.image.ImageDataGenerator(rescale=1./255,
                                                  shear_range=0.2,
                                                  zoom_range=0.2,
                                                  horizontal_flip=True,
                                                  rotation_range=30,
                                                  validation_split=0.2)        # set validation split

train_generator = train_datagen.flow_from_directory(
    data_pathway,
    target_size=(img_height, img_width),
    batch_size=batch_size,
    class_mode='binary',
    subset='training') # set as training data

validation_generator = train_datagen.flow_from_directory(
    data_pathway, # same directory as training data
    target_size=(img_height, img_width),
    batch_size=batch_size,
    class_mode='binary',
    subset='validation') # set as validation data

#________
# Compile model
#________
lr_schedule = tf.keras.callbacks.LearningRateScheduler(
    lambda epoch: 1e-4 * 10**(-(epoch / 50)))
optimizer = tf.keras.optimizers.SGD(lr=1e-4, momentum=0.9)

cp_callback = tf.keras.callbacks.ModelCheckpoint(
        filepath = 'D:/Tensorflow_practice_data/checkpoints',
        period=10        
        )

model = tf.keras.Sequential([tf.keras.layers.Conv2D(16, (3,3), \
                    activation='relu', input_shape=(img_height, img_width, 3)),
                        tf.keras.layers.MaxPooling2D(2,2),
                        tf.keras.layers.Conv2D(32, (3,3), activation='relu'),
                        tf.keras.layers.MaxPooling2D(2,2), 
                        tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
                        tf.keras.layers.MaxPooling2D(2,2), 
                        tf.keras.layers.Flatten(),
                        tf.keras.layers.Dropout(.2),
                        tf.keras.layers.Dense(512, activation='relu'),
                        tf.keras.layers.Dense(1, activation='sigmoid')]
)

model.compile(optimizer = optimizer, 
              loss = 'binary_crossentropy', 
              metrics = ['acc'])

#________
# Fit model
#________
history = model.fit(
        train_generator,
        steps_per_epoch = train_generator.samples // batch_size,
        validation_data = validation_generator, 
        validation_steps = validation_generator.samples // batch_size,
        epochs = epochs_to_train,
        callbacks=[lr_schedule, cp_callback])

plt.semilogx(history.history["lr"], history.history['loss'])


plt.semilogx(history.history["lr"], history.history['acc'])
plt.axis([1e-8, 1e-4, 0, 1])
SoundRotator()                                                                 #play sound to indicate file has completed



